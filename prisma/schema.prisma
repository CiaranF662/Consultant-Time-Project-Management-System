generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(cuid())
  name               String?
  email              String?                 @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole                @default(CONSULTANT)
  status             UserStatus              @default(APPROVED)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  accounts           Account[]
  projectAssignments ConsultantsOnProjects[]
  approvedChanges    HourChangeRequest[]     @relation("ChangeRequestApprover")
  changeRequests     HourChangeRequest[]     @relation("ChangeRequestRequester")
  notifications      Notification[]
  phaseAllocations   PhaseAllocation[]
  managedProjects    Project[]               @relation("ProductManager")
  sessions           Session[]
  weeklyAllocations  WeeklyAllocation[]
  plannedWeeklyAllocations    WeeklyAllocation[] @relation("WeeklyAllocationPlanner")
  approvedWeeklyAllocations   WeeklyAllocation[] @relation("WeeklyAllocationApprover")
}

model Project {
  id               String                  @id @default(cuid())
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime?
  budgetedHours    Int                     @default(0)
  productManagerId String?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  consultants      ConsultantsOnProjects[]
  phases           Phase[]
  productManager   User?                   @relation("ProductManager", fields: [productManagerId], references: [id])
  sprints          Sprint[]
}

model ConsultantsOnProjects {
  userId         String
  projectId      String
  assignedAt     DateTime    @default(now())
  role           ProjectRole @default(TEAM_MEMBER)
  allocatedHours Float?      // Total hours allocated to this consultant for the entire project
  project        Project     @relation(fields: [projectId], references: [id])
  user           User        @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
}

model Phase {
  id          String            @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  projectId   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  allocations PhaseAllocation[]
  sprints     Sprint[]
}

model Sprint {
  id           String   @id @default(cuid())
  sprintNumber Int
  startDate    DateTime
  endDate      DateTime
  projectId    String
  phaseId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  phase        Phase?   @relation(fields: [phaseId], references: [id])
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, sprintNumber])
}

model PhaseAllocation {
  id                    String                  @id @default(cuid())
  phaseId               String
  consultantId          String
  totalHours            Float
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  // Reallocation tracking
  isReallocation        Boolean                 @default(false)
  reallocatedFromPhaseId String?               // Original phase where hours came from
  reallocatedFromUnplannedId String?           // Link to UnplannedExpiredHours record
  parentAllocationId    String?                 // For linking reallocations to original allocations

  // Composition tracking (for Scenario 2 - merged pending allocations)
  isComposite           Boolean                 @default(false)
  compositionMetadata   Json?                   // Track what was merged: [{originalHours, reallocatedHours, timestamp}]

  consultant            User                    @relation(fields: [consultantId], references: [id])
  phase                 Phase                   @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  weeklyAllocations     WeeklyAllocation[]
  unplannedExpiredHours UnplannedExpiredHours?

  // Relations for parent-child reallocation hierarchy
  parentAllocation      PhaseAllocation?        @relation("AllocationHierarchy", fields: [parentAllocationId], references: [id], onDelete: SetNull)
  childAllocations      PhaseAllocation[]       @relation("AllocationHierarchy")

  @@unique([phaseId, consultantId, isReallocation, parentAllocationId])
  @@index([parentAllocationId])
  @@index([reallocatedFromPhaseId])
}

model UnplannedExpiredHours {
  id                String              @id @default(cuid())
  phaseAllocationId String              @unique
  unplannedHours    Float               // Hours that were never planned before phase ended
  status            ExpiredHoursStatus  @default(EXPIRED)
  detectedAt        DateTime            @default(now())
  handledAt         DateTime?           // When PM forfeited or reallocated
  handledBy         String?             // PM who handled it
  reallocatedToPhaseId String?          // If reallocated, which phase
  reallocatedToAllocationId String?     // If reallocated, the new allocation created
  notes             String?             // PM notes/reason for forfeit or reallocation
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  phaseAllocation   PhaseAllocation     @relation(fields: [phaseAllocationId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([detectedAt])
}

model WeeklyAllocation {
  id                String          @id @default(cuid())
  phaseAllocationId String
  consultantId      String
  weekStartDate     DateTime
  weekEndDate       DateTime
  weekNumber        Int
  year              Int
  proposedHours     Float?
  approvedHours     Float?
  planningStatus    PlanningStatus  @default(PENDING)

  plannedBy         String?
  approvedBy        String?
  approvedAt        DateTime?
  rejectionReason   String?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  consultant        User            @relation(fields: [consultantId], references: [id])
  phaseAllocation   PhaseAllocation @relation(fields: [phaseAllocationId], references: [id], onDelete: Cascade)
  planner           User?           @relation("WeeklyAllocationPlanner", fields: [plannedBy], references: [id])
  approver          User?           @relation("WeeklyAllocationApprover", fields: [approvedBy], references: [id])

  @@unique([phaseAllocationId, weekNumber, year])
  @@index([consultantId, weekStartDate])
  @@index([weekStartDate])
}

model HourChangeRequest {
  id                String       @id @default(cuid())
  changeType        ChangeType
  phaseAllocationId String?
  originalHours     Float
  requestedHours    Float
  fromConsultantId  String?
  toConsultantId    String?
  shiftHours        Float?
  phaseId           String?
  weekNumber        Int?
  year              Int?
  reason            String
  status            ChangeStatus @default(PENDING)
  consultantId      String
  approverId        String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  approver          User?        @relation("ChangeRequestApprover", fields: [approverId], references: [id])
  requester         User         @relation("ChangeRequestRequester", fields: [consultantId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String    // email address
  token      String    @unique
  type       TokenType @default(EMAIL_VERIFICATION)
  expires    DateTime
  createdAt  DateTime  @default(now())

  @@unique([identifier, token])
  @@index([token])
  @@index([identifier])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  actionUrl String?
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
}

enum NotificationType {
  PROJECT_ASSIGNMENT
  HOUR_CHANGE_REQUEST
  HOUR_CHANGE_APPROVED
  HOUR_CHANGE_REJECTED
  PHASE_DEADLINE_WARNING
  USER_APPROVAL_NEEDED
  OVERDUE_APPROVAL_ALERT
  PHASE_ALLOCATION_PENDING
  PHASE_ALLOCATION_APPROVED
  PHASE_ALLOCATION_REJECTED
  PHASE_ALLOCATION_MODIFIED
  PHASE_ALLOCATION_EXPIRED
  WEEKLY_ALLOCATION_PENDING
  WEEKLY_ALLOCATION_APPROVED
  WEEKLY_ALLOCATION_MODIFIED
  WEEKLY_ALLOCATION_REJECTED
}

enum UserRole {
  GROWTH_TEAM
  CONSULTANT
}

enum UserStatus {
  PENDING
  APPROVED
}

enum ChangeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ChangeType {
  ADJUSTMENT
  SHIFT
}

enum ProjectRole {
  PRODUCT_MANAGER
  TEAM_MEMBER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED    // Phase ended with unplanned hours (deprecated - use UnplannedExpiredHours table)
  FORFEITED  // Hours were forfeited by PM (deprecated - use UnplannedExpiredHours table)
}

enum ExpiredHoursStatus {
  EXPIRED       // Hours detected as unplanned after phase end
  FORFEITED     // PM chose to forfeit these hours
  REALLOCATED   // PM reallocated to another phase (pending GT approval)
}

enum PlanningStatus {
  PENDING
  APPROVED
  MODIFIED
  REJECTED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
