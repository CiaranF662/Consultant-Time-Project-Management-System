// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // This field will store the hashed password
  role          UserRole  @default(CONSULTANT)
  status        UserStatus @default(APPROVED)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]

  projects        Project[]
  assignedTasks   Task[] // Tasks this user is assigned to
  sprintHours     ConsultantSprintHours[]
  changeRequests  HourChangeRequest[] @relation("ChangeRequestRequester")
  approvedChanges HourChangeRequest[] @relation("ChangeRequestApprover")
}

model Project {
  id           String    @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  consultantId String
  consultant   User      @relation(fields: [consultantId], references: [id])

  phases      Phase[] // A project has many phases
  tasks       Task[] // A project has many tasks
  sprintHours ConsultantSprintHours[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NEW MODEL: For project phases
model Phase {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime

  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sprint {
  id            String   @id @default(cuid())
  name          String
  startDate     DateTime @unique
  endDate       DateTime @unique
  expectedHours Int      @default(80)

  tasks          Task[] // A sprint contains tasks from various projects
  sprintHours    ConsultantSprintHours[]
  changeRequests HourChangeRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NEW MODEL: For tasks within a sprint for a project
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)

  sprintId String
  sprint   Sprint     @relation(fields: [sprintId], references: [id])

  projectId String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?      @relation(fields: [assigneeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConsultantSprintHours {
  id           String @id @default(cuid())
  hours        Float
  weekNumber   Int
  consultantId String
  sprintId     String
  projectId    String

  consultant User    @relation(fields: [consultantId], references: [id])
  sprint     Sprint  @relation(fields: [sprintId], references: [id])
  project    Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([consultantId, sprintId, projectId, weekNumber])
}

model HourChangeRequest {
  id             String       @id @default(cuid())
  originalHours  Float
  requestedHours Float
  reason         String
  status         ChangeStatus @default(PENDING)
  weekNumber     Int
  consultantId   String
  sprintId       String
  projectId      String

  requester  User     @relation("ChangeRequestRequester", fields: [consultantId], references: [id])
  sprint     Sprint   @relation(fields: [sprintId], references: [id])
  approverId String?
  approver   User?    @relation("ChangeRequestApprover", fields: [approverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  GROWTH_TEAM
  CONSULTANT
}

enum ChangeStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserStatus {
  PENDING
  APPROVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}